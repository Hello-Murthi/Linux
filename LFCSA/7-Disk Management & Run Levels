
System Run Level:

Main Run level
• 0 Shut down (or halt) the system
• 1 Single-user mode; usually aliased as s or S
• 6 Reboot the system

Other Run levels
• 2 Multiuser mode without networking
• 3 Multiuser mode with networking
• 5 Multiuser mode with networking and GUI.

----


Computer Boot Process (Irrespective of OS and Generally)

1. Power On
2. Power Goes to Mother Board (CPU)
3. CPU will just starts but doesn't have any instructions or doesn't know what to do further
4. So CPU asks BIOS for the Instructions
5. BIOS has a tiny Software and that little chip is ROM (Read Only Memory)
6. BIOS also need some instructions from CMOS (located next to BIOS) - (Complementary Metal Oxide Semiconductor)
7. CMOS has BIOS Settings like System Time, Date, Hardware Setting and CMOS is powered by Battery but not Power
8. CPU Reads one of the instructions from BIOS called - POST (Power-On Self Test)
9. POST means - it goes to every device attached and in working condition
10. Now BIOS goes to DISK (MBR - Master Boot Record)
11. MBR has the information about OS
12. From MBR, OS will get loaded to RAM 
13. From here, OS will come to picture, whatever code is instruction/written on OS, will start 
14. Once it's loaded in to Memory and applications started then goes back to CPU to process 
15. This entire process is called Bootstarp!!!

Power On -> CPU -> BIOS -> MBR -> RAM -> CPU!!!


-----------


Linux Boot Process (almost like above but little extra below)

1. Power On
2. BIOS
3. MBR (Around 512 MB Size)
4. MBR Executes GRUB (Grand Unified Boot Loader)
5. GRUB calls Kernel (we can select type of kernels)
6. Kernel calls Init
7. Init loads temporary root file system until Kernel is loaded also contains devices compiled which helps to access Hard drive partition and other Hardware
8. Init Executes Run Level programs ( 7 types are the in Run level) (like calling OS)

------

Linux Boot Process  (New)

1. After CentOS/RHEL 7, little bit has been changed on Boot Process
2. systemd - is new service manager in CentOS/RHEL 7 which manages boot sequence

1. BIOS = Basic Input and Output Setting (firmware interface) and POST = Power-On Self-Test started
2. MBR = Master Boot Record -> Information saved in the first sector of a hard disk that indicates where the GRUB2 is located so it can be loaded in computer RAM
3. GRUB2 = Grand Unified Boot Loader v2 - Loads Linux kernel /boot/grub2/grub.cfg
4. Kernel = Core of Operating System, Loads required drivers from initrd.img, Starts the first OS process (systemd)
5. Systemd = System Daemon (PID # 1), It then starts all the required processes, Reads = /etc/systemd/system/default.target to bring the system to the run-level, Total of 7 run-levels (0 thru 6)



Systemd:
Is a system and service manager for Linux operating systems. It is designed to manage system startup, service management, and other essential functions of a Linux system. Here's a breakdown of what it does and why it's significant:

Key Functions of Systemd:

1. System Initialization (Init):
    Systemd is often used as the default init system, which means it's responsible for booting the system and starting up all the necessary services and processes.

2. Service Management: Systemd manages services and daemons. Services are typically started, stopped, and restarted based on configuration files. Systemd provides tools to control and monitor these services, such as systemctl and journalctl.

------

Message of the Day:

Once again, message of the day is the first message users will see when they login to the Linux machine
• Message of the day file location
• /etc/profile.d/motd.sh

----

Disk Partition
• Commands for disk partition
    • df
    • fdisk


Adding Disk and Creating Partition
• Purpose? = Out of Space, Additional Apps etc.
• Commands for disk partition
    • df
    • fdisk


----

Computer Storage:

• Local Storage
    • RAM, HDD, SSD, etc.

• DAS (Direct Attached Storage)
    • CD/DVD, USB flash drive, external disk directly attached with USB or other cables

• SAN (Storage Area Network)
    • Storage attached through iSCSI or fiber cable

• NAS (Network Attached Storage)
    • Storage attached over network (TCP/IP)
    • E.g. Samba, NFS etc.

----


When you extend a Disk:

1. Add New Disk
2. Assign type of File System (Latest is XFS)
3. Mount the volume
4. Persist the volume mount in /etc/fstab

If you want unmount anything, can be done by unmount
If you run mount -a - mounts all given in /etc/fstab again 

----

LVM:

LVM allows disks to be combined together

Physical Volume -> Volume Groups (vg) -> Logical Volumes (lv) (Ex: in windows C:, D:. E:)

* You can group any number of Physical Volumes together
* Add Physical Volume to Groups (ex: datavg)
* Use it as Logical Volumes (lv)

LVM related Disk names starts with /dev - e x: /dev/mapper


Mains Steps:

Hard Disk -> Partition -> Physical Volume -> Volume Group -> Logical Volume -> Attach File Systm Type - Mount Volume & Persist

----

Now we have 2 ways of Volume attach:

1. Creating Disk Partitions Directly
When to use:

Simple Use Cases: If your storage needs are straightforward and you don’t require advanced features, creating and managing partitions directly on a disk might be sufficient. For instance, if you have a single disk and want to partition it into several sections, you can use tools like fdisk, parted, or gparted.
Fixed Disk Sizes: When the size of your partitions and the number of partitions won’t change frequently, managing partitions directly is simpler and easier.
Non-Root Filesystems: If you’re working with non-root filesystems or data storage where flexibility in resizing isn’t a concern, direct partitioning works well.


2. Creating Disks through LVM
When to use:

Dynamic Storage Needs: If you need flexibility in managing disk space, such as resizing volumes, adding new disks, or creating snapshots, LVM is beneficial. It allows you to create logical volumes that can be resized or moved without altering physical partitions.
Volume Management: If you plan to use multiple physical disks or need to manage storage across multiple disks, LVM helps in creating logical volumes that span across these disks.
Snapshots and Backups: LVM supports snapshots, allowing you to take point-in-time backups of your data, which can be crucial for certain types of applications and backup strategies.
Advanced Features: Features like striping, mirroring, and pooling of storage can be easily managed using LVM.


----

When we use LVM?

/oracle = 1.0G
/oracle = Full

Few Options:
• Delete older files to free up disk space
• Add new physical disk mount to /oracle2
• Create a new virtual disk and mount to /oracle2
• Or extend /oracle through LVM.

----

Add/Extend Swap Space:

What is swap? – CentOS.org
Swap space in Linux is used when the amount of physical memory (RAM) is full. If the system needs more memory resources and the RAM is full, inactive pages in memory are moved to the swap space. While swap space can help machines with a small amount of RAM, it should not be considered a replacement for more RAM. Swap space is located on hard drives, which have a slower access time than physical memory

Recommended swap size = Twice the size of RAM
M = Amount of RAM in GB, and S = Amount of swap in GB, then

If M < 2
then S = M *2
Else S = M + 2


Commands
• dd
• mkswap
• swapon or swapoff


----

Implement Advanced Storage Features:

Red Hat 8 introduces the next generation volume management solution called Stratis
• It uses thin provisioning by default
• It combines the process of creating logical volume management (LVM) and creation of
filesystems into one management
• In LVM if a filesystem system gets full you will have to extend it manually whereas stratis
extends the filesystem automatically if it has available space in its pool

----


RAID:

Which stands for Redundant Array of Independent Disks, is a technology used to combine multiple physical hard drives into a single logical unit for the purpose of data redundancy, performance improvement, or both. In Linux, RAID is managed through the software RAID system known as md (multiple devices) or, more recently, through the mdadm tool, which provides more advanced features and management options.

Common RAID Levels
RAID 0 (Striping):

Description: Distributes data evenly across multiple drives to improve performance.
Pros: Increases read and write speeds.
Cons: No redundancy; if one drive fails, all data is lost.
Use Case: Suitable for high-performance applications where data loss isn't critical.
RAID 1 (Mirroring):

Description: Duplicates the same data on two or more drives.
Pros: Provides redundancy; if one drive fails, data is still available on another.
Cons: Higher cost due to duplication of storage.
Use Case: Ideal for systems where data integrity and availability are critical.
RAID 5 (Striping with Parity):

Description: Distributes data and parity (error-checking information) across all drives.
Pros: Offers a good balance of performance, redundancy, and storage efficiency.
Cons: Write performance can be slower due to parity calculations; requires at least three drives.
Use Case: Commonly used in servers and applications requiring high read performance with fault tolerance.
RAID 6 (Striping with Double Parity):

Description: Similar to RAID 5, but with an extra layer of parity.
Pros: Can withstand the failure of two drives.
Cons: More overhead for parity, which can impact write performance.
Use Case: Suitable for environments where data protection is more critical than write performance.
RAID 10 (1+0, Mirroring + Striping):

Description: Combines RAID 1 and RAID 0 by first mirroring data, then striping it across multiple drives.
Pros: Provides both high performance and redundancy.
Cons: Requires at least four drives and has a higher cost.
Use Case: Ideal for high-performance applications with redundancy needs.


Managing RAID in Linux
mdadm: This is the primary utility for managing RAID arrays in Linux. It allows you to create, manage, and monitor RAID arrays.

-----

Latest File System - XFS
EXT...etc Old

---

File System Check (fsck and xfs_repair)

• Linux fsck utility is used to check and repair Linux filesystems (ext2, ext3, ext4, etc.)
• Linux xfs_repair utility is used to check and repair Linux filesystems for xfs filesystem type
• Depending on when was the last time a file system was checked, the system runs the fsck during boot time to check whether the filesystem is in consistent state
• System administrator could also run it manually when there is a problem with the filesystems
• Make sure to execute the fsck on an unmounted file systems to avoid any data corruption issues.
• AForce a filesystem check even if it’s clean using option –f
• Attempt to fix detected problems automatically using option -y
• The xfs_repair utility is highly scalable and is designed to repair even very large file systems with many inodes efficiently. Unlike other Linux file systems, xfs_repair does not run at boot time
• The following are the possible exit codes for fsck command


----

System Backup (dd Command)

5 Different Types of Backups
1. System backup (entire image using tools such as acronis, Veeam, Commvault etc.)
2. Application backup (3rd party application backup solution)
3. Database backup (Oracle dataguard, SQL backup etc.)
4. Filesystem backup (tar, gzip directoris etc.)
5. Disk backup or disk cloning (dd command)

• dd is a command-line utility for Unix and Unix-like operating systems whose primary purpose is to convert and copy files
• As a result, dd can be used for tasks such as backing up the boot sector of a hard drive, and obtaining a fixed amount of random data
• Please note the source and destination disk should be the same size


----

Network File System (NFS)

• NFS stands for Network File System, a file system developed by Sun Microsystems, Inc.
• It is a client/server system that allows users to access files across a network and treat them as if they resided in a local file directory
• For example, if you were using a computer linked to a second computer via NFS, you could access files on the second computer as if they resided in a directory on the first computer. This is accomplished through the processes of exporting (the process by which an NFS server provides remote clients with access to its files) and mounting (the process by which client map NFS shared filesystem)


----

Samba

• Samba is a Linux tool or utility that allows sharing for Linux resources such as files and printers to with other operating systems
• It works exactly like NFS but the difference is NFS shares within Linux or Unix like system whereas Samba shares with other OS (e.g. Windows, MAC etc.)
• For example, computer “A” shares its filesystem with computer “B” using Samba then computer “B” will see that shared filesystem as if it is mounted as the local filesystem

----

Samba (smb vs. CIFS)

• Samba shares its filesystem through a protocol called SMB (Server Message Block) which was invented by IBM
• Another protocol used to share Samba is through CIFS (Common Internet File System) invented by Microsoft and NMB (NetBios Named Server)
• CIFS became the extension of SMB and now Microsoft has introduced newer version of SMB v2 and v3 that are mostly used in the industry
• In simple term, most people, when they use either SMB or CIFS, are talking about the same exact thing 

----

NAS Device for NFS or Samba

A storage can be carved on a Linux server, and it can be shared with another Linux machine through NFS or to a Windows machine through Samba service

NFS/Samba or any NAS service can be setup through a dedicated NAS device

----

SATA and SAS

• SATA Stands for Serial Advanced Technology Attachment and SAS stands for Serial Attached SCSI (SCSI Stands for Small Computer System Interface, typically pronounced as “scuzzy”)
• Both SAS and SATA utilize serial communication. Serial communication means that the highway has both lanes
•  The main difference between them is that SAS drives are faster and more reliable than SATA drives
• SAS is generally more expensive, and it’s better suited for use in servers or in processing-heavy computer workstations. SATA is less expensive, and it’s better suited for desktop file storage
• In a SATA cable, all 4 wires are placed within the same cable. In a SAS cable, the 4 wires are separated into 2 different cables

Why divide the wires between 2 cables???
• So you can connect more devices to one another. With a SATA cable, you can only link the motherboard and the storage drive. You could hook up an expansion device, but that takes up valuable room inside your computer.
• With a SAS cable, you can hook up the motherboard to both a storage drive and another piece of hardware that has SAS connectors


----
